name: Python CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Upgrade pip and install dependencies (full, strict)
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade -r requirements.txt
          pip install --upgrade flake8 black isort mypy bandit safety pytest pytest-cov pytest-asyncio

      - name: Lint with flake8 (strict)
        run: flake8. --count --select=E9,F63,F7,F82 --show-source --statistics

      - name: Lint with flake8 (all)
        run: flake8. --count --max-complexity=10 --max-line-length=127 --statistics

      - name: Check formatting with black
        run: black --check.

      - name: Check import sorting with isort
        run: isort --check-only.

      - name: Type check with mypy
        run: mypy. --ignore-missing-imports

      - name: Security check with bandit
        run: bandit -r.

      - name: Dependency security with safety
        run: safety check

      - name: Build with Makefile
        run: make build

      - name: Test with Makefile
        run: make test

      - name: Clean with Makefile
        run: make clean

      - name: Setup Testcontainers Cloud Client
        if: "${{ secrets.TC_CLOUD_TOKEN != '' }}"
        uses: atomicjar/testcontainers-cloud-setup-action@v1
        with:
          token: ${{ secrets.TC_CLOUD_TOKEN }}

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12", "3.13", "if not update"] 
  
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Upgrade pip and install dependencies (full, strict)
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade -r requirements.txt
          pip install --upgrade pytest pytest-cov pytest-asyncio

      - name: Run all tests with coverage
        run: pytest --cov=temporal_viz --cov=mcp_server --cov=exo_integration --cov-report=xml

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
          fix_if_errors: True

      - name: Build with Makefile
        run: make build

      - name: Test with Makefile
        run: make test

      - name: Clean with Makefile
        run: make clean

  integration-test:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Upgrade pip and install dependencies (full, strict)
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade -r requirements.txt

      - name: Build with Makefile
        run: make build

      - name: Run LEX TRI diagnostics
        run: python lextri_runner.py

      - name: Generate example timeline
        run: python lextri_runner.py --mode example --output test_timeline

      - name: Analyze timeline
        run: python lextri_runner.py --mode analyze --input test_timeline.json --output test_analysis.json

      - name: Create visualization
        run: python lextri_runner.py --mode visualize --input test_timeline.json --output test_viz.png

      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-artifacts
          path: |
            test_timeline.json
            test_analysis.json
            test_viz.png

      - name: Clean with Makefile
        run: make clean

  security-scan:
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Upgrade pip and install dependencies (security tools)
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade bandit safety

      - name: Run bandit (security linter)
        run: bandit -r.

      - name: Run safety (dependency vuln scan)
        run: safety check

      - name: Run Trivy security scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
